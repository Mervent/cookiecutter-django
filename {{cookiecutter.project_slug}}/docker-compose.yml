version: '2'

volumes:
  postgres_data: {}
  backups: {}
  media: {}
  static: {}

services:
  postgres:
    image: postgres:{{ cookiecutter.postgresql_version }}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file: .env

  django:
    build:
      context: .
      dockerfile: ./compose/django/Dockerfile
    user: django
    volumes:
      - media:/app/media
      - static:/app/static
    depends_on:
      - postgres
      - redis
    command: /gunicorn.sh
    env_file: .env

  nginx:
    build: ./compose/nginx
    depends_on:
      - django
      - certbot
    ports:
      - "0.0.0.0:80:80"
    volumes_from:
      - django
    environment:
      - MY_DOMAIN_NAME={{ cookiecutter.domain_name }}
    ports:
      - "0.0.0.0:80:80"
      - "0.0.0.0:443:443"
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/lib/letsencrypt:/var/lib/letsencrypt

  certbot:
    image: quay.io/letsencrypt/letsencrypt
    command: bash -c "sleep 6 && certbot certonly -n --standalone -d {{ cookiecutter.domain_name }} -d www.{{ cookiecutter.domain_name }} --test --agree-tos --email {{ cookiecutter.email }} --server https://acme-v01.api.letsencrypt.org/directory --rsa-key-size 4096 --verbose --keep-until-expiring --preferred-challenges http-01"
    entrypoint: ""
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/lib/letsencrypt:/var/lib/letsencrypt
    ports:
      - "80"
      - "443"
    environment:
      - TERM=xterm

  redis:
    image: redis:latest

  backup:
    build: ./compose/backup
    volumes:
      - backups:/backups
    volumes_from:
      - django
    env_file: .env
    command: /bin/true
